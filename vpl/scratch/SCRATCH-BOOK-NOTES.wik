SCRATCH BOOKS - BOOK ABBREVIATIONS
|---------------+-----------+------------------------------------+-------------|
|          ISBN | ABBR NAME | TITLE                              | Author      |
|---------------+-----------+------------------------------------+-------------|
| 9781593275433 | L2PWSCR   | LEARN TO PROGRAM WITH SCRATCH      | MAJED MARJI |
|               |           | A VISUAL INTRODUCTION TO           |             |
|               |           | PROGRAMMING                        |             |
|               |           | WITH GAMES, ART, SCIENCE, AND MATH |             |
|---------------+-----------+------------------------------------+-------------|
|               |           |                                    |             |
|---------------+-----------+------------------------------------+-------------|

SCRATCH BOOKS - BOOK RESOURCES
|-----------+------------------------------------|
| BOOK ABBR | COMPANION WEBSITE                  |
|-----------+------------------------------------|
| L2PWSCR   | nostarch.com/learnscratchresources |
|-----------+------------------------------------|

SCRATCH BOOKS - L2PWSCR

The L2PWSCR book covers the scratch version 2 functionality
which is mostly still applicable to the later scratch 3 version.

Ubuntu installation steps for scratux (scratch 3 equivalent) can be found at
../../adm/term/220608.wik.

the text that relates to a script from the book resource website has a blue
filename in the left margin next to the text, ie: TennisBallChaser.sb2
(ch2 - using motion commands section - other motion commands subsection)

tryio -> try it out

The companion website contains chapter scripts, and will be converted
from sb2 to sb3 upon opening in scratux. There is a button in the Costumes
tab to convert the images from bitmap to vector (svg).

SCRATCH BOOKS - L2PWSCR - TOC
ch1 - Getting Started
ch2 - Motion and Drawing
ch5 - Variables

SCRATCH BOOKS - L2PWSCR - CH1 - SCRATCH PROGRAMMING ENVIRONMENT SECTION -
SPRITE INFO SUBSECTION - ROTATION/DIRECTION
to set a sprite's initial rotation style in scratch 3, click on the text box
labeled 'Direction' in the Sprite Info Area to bring up the direction controls'
popover and click to toggle (blue highlight) one of these
bottom popover buttons:
    'Do not rotate' (hover text) button
        only direction will be configured
    'All Around' (hover text) button
        rotates to the same angle as the direction
    'Left/Right' (hover text) button
        180 degree horizontal (reflecting across y-axis) rotation only based
	based on if its in a negative or positive x direction
	(negative x direction means it faces left)

in scratch 3, a sprite's initial direction can also be set by dragging the
arrow angle indicator found on the unit circle of the Direction popover

the direction is a bit unusual since the angle 90 degrees is actually 0 degrees,
so it is translated counter-clockwise by 90, additionally instead of having
direction numbers go past 180, it instead uses negative numbers for the left
semisphere of direction values (converts to -179 rather than 181 if you assign
it in the 'point in direction' block)

SCRATCH BOOKS - L2PWSCR - CH1 - SCRATCH PROGRAMMING ENVIRONMENT SECTION -
SPRITE INFO SUBSECTION - 1.12 SPRITE INFO AREA FIGURE
the 'can drag in player' checkbox is not there in scratch 3; you can drag
sprites to set the initial position in the mini-sized 'Stage' player area but
not when in 'Presentation mode' (activated via fullscreen button)

SCRATCH BOOKS - L2PWSCR - CH1 - SCRATCH PROGRAMMING ENVIRONMENT SECTION -
TOOLBAR SUBSECTION - 1.14 SCRATCH'S TOOLBAR FIGURE
in scratch 3, right-click on the sprite icon in the Sprite Info Area to bring
up some the previous tolbar options in a right-click popover menu: includes
duplicate, export (new?), and delete

SCRATCH BOOKS - L2PWSCR - CH1 - PAINT EDITOR SECTION -
SETTING THE CENTER OF THE IMAGE SUBSECTION
in scratch 3 there isn't a 'Set costume center' button that enabled
re-positioning the referential center (of rotation) point
by dragging the x and y axes; however, you can still modify the reference point
in version 3 by selecting all of the sprite in the Paint editor and then click-
dragging the sprite to re-position the blue crosshairs.

when the blue crosshairs are positioned?:
   at the black crosshairs: then rotating the sprite will just rotate itself
                            without visualized displacement
   not at the block crosshairs: then the sprite rotates around the designated
                                point with visualized displacement

SCRATCH BOOKS - L2PWSCR - CH1 - PAINT EDITOR SECTION -
SETTING THE CENTER OF THE IMAGE SUBSECTION - 1-10 TRY IT OUT EXERCISE
Code is found in l2pwscr/RotationCenterWithParallax_sb3/.
see commented-out steps in the ../../adm/bin/stage-scratch file to re-assemble
the folder as a .sb3 file.

stamp is explained in 'ch2 - the power of repeat section - exploring with stamp
subsection'. It is used before a move command to clone a copy and leave a trail
effect.

the command blocks apply to the currently selected sprite, to affect a
different sprite you can select it and have its own sprite code blocks

the clear block might be equivalent to the 'erase all' block that can be added
by adding in the PEN extension

and the 'stamp' block is available as well after adding the PEN extension

SCRATCH BOOKS - L2PWSCR - CH1 - YOUR FIRST SCRATCH GAME SECTION -
STEP 1: PREPARE THE BACKDROP - 1-19 FIGURE THE STEPS FOR DRAWING A RECTANGLE
AT THE BOTTOM OF THE BACKGROP IMAGE
a not-so-obvious feature is that the 'Stage' can be selected and code added
specifically for the stage/backdrops similarly as can be done with each sprite,
with some limitations (ie: motion controls are not available). But since the
game needs to detect a particular part of the backdrop and not the whole
backdrop all the code for this pong game will be added to the sprites and
the ball sprite will have code utilizing the 'touching color' 'Sensing' control
in order to detect the out-of-bounds rectangle with ball collision.

SCRATCH BOOKS - L2PWSCR - CH1 - YOUR FIRST SCRATCH GAME SECTION - STEP 3: START
THE GAME AND GET YOUR SPRITES MOVING SUBSECTION - 1-11 TRY IT OUT EXERCISE
Code is found in l2pwscr/PongTwoPaddles_sb3/. The custom implementation makes
use of variables, see cautionary note down in CH5 notes.

The 'mouse x' block can be dragged in place of a hardcoded value as some sort of
special mouse binding variable.

The 'pick random' block can be used as input to another block, essentially like
nesting functions, ie: point_in_direction(pick_random(135, to: 225))

the 'if on edge, bounce' block is a convenient block for this game


SCRATCH BOOKS - L2PWSCR - CH1 - ARITHMETIC OPERATORS AND FUNCTIONS SECTION -
MATHEMATICAL FUNCTION SUBSECTION
in v3, to get a 'sqrt of' block drag an 'abs of' block onto the scripts/code
area and then change it's dropdown to choose 'sqrt' or whichever  math
function is required

SCRATCH BOOKS - L2PWSCR - CH2 - USING MOTION COMMANDS SECTION -
ABSOLUTE MOTION SUBSECTION
in v3, the 'glide to' command block now also has a secs (time duration)
input parameter

the book mentions a 'x position' and 'y position reporter blocks', I assume
that means placing a 'x position' built-in variable block into a 'say' command
block (useful for debugging purposes)

the 'change by x' and 'change by y' blocks are useful alternatives to
'move steps' if you aren't concerned with direction/rotation

the 'turn _ degrees' command block also modifies the direction configuration
of the sprite

SCRATCH BOOKS - L2PWSCR - CH2 - USING MOTION COMMANDS SECTION -
OTHER MOTION COMMANDS SUBSECTION
see custom code version: l2pwscr/TennisBallChaserAndEat_sb3/

SCRATCH BOOKS - L2PWSCR - CH2 - PEN COMMANDS AND EASY DRAW SECTION
in v3 the pen palette is not there by default, click the add extension button
on the bottom left of the left-most pane to select it

see custom code version: todo l2pwscr/EasyDrawAutoTri_sb3

SCRATCH BOOKS - L2PWSCR - CH2 - THE POWER OF REPEAT SECTION

l2pwscr/DrawSquareRepeated_sb3/
sb3 conversion:        -sb2-   ->   -sb3-
                       clear   ->   erase all (+Pen extension)

side note: one way to reset a starting position without moving the sprite is
           to have multiple 'when flag clicked' blocks and then just click
	   the one that has just reset control blocks

SCRATCH BOOKS - L2PWSCR - CH2 - THE POWER OF REPEAT SECTION - TRYIO.2-5

l2pwscr/PolygonMultiColor_sb3/
sb3 conversion:        -sb2-   ->   -sb3-
                       clear   ->   erase all (+Pen extension)

note: the sb2 book companion code version when opened in v3 converted the
      "set pen color to" block to have a number in it instead of
      the usual v3 color picker; so this means it works with a value
      and you can replace the color picker with a number variable by
      dragging a variable and landing it over the block's color icon.

question: how do the colors work numerically as it is just a single number?
answer: see [1], the color is stored as a 3 byte integer
        0xFF0000 Red (255*256*256)
        0x00FF00 Green (255*256)
	0x0000FF Blue (255)
[1] https://scratch-tutorial.readthedocs.io/fr/latest/4_pen/pen.html

SCRATCH BOOKS - L2PWSCR - CH2 - THE POWER OF REPEAT SECTION -
ROTATED SQUARES SUBSECTION

l2pwscr/RotatedSquaresLoopUnrolled_sb3/
sb3 conversion:        -sb2-   ->   -sb3-
                       clear   ->   erase all (+Pen extension)

SCRATCH BOOKS - L2PWSCR - CH2 - THE POWER OF REPEAT SECTION -
EXPLORING WITH STAMP SUBSECTION

l2pwscr/WindmillWithColorEFfect_sb3/
sb3 conversion:        -sb2-   ->   -sb3-
                       clear   ->   erase all (+Pen extension)

SCRATCH BOOKS - L2PWSCR - CH2 - SCRATCH PROJECTS SECTION -
GET THE MONEY SUBSECTION

l2pwscr/MoneyDrawBoard_sb3/

note: book companion code's implementation uses a backdrop
      ghost effect amnd it is the ghost effect that can be used to
      change a sprite's transparency

use 'change score by' 1 block to increment by 1 (ie: var++)

note2: the player sprite needs to have Left/Right rotation turned on,
and the 'if on edge, bounce' block will automatically rotate once hitting
a left or right edge

Variables can be shown directly on the screen by clicking the checkbox
in the left pane (palette). Once shown it can be dragged, see score

SCRATCH BOOKS - L2PWSCR - CH2 - SCRATCH PROJECTS SECTION -
GET THE MONEY SUBSECTION - SCRATCH'S TIMER INFOBOX

Scratch has a built-in timer that will automatically increase in value
over time. The timer variable has the current time value that can be
read/compared, and then can be reset back to 0 with the 'reset timer' block.

SCRATCH BOOKS - L2PWSCR - CH2 - SCRATCH PROJECTS SECTION -
CATCHING APPLES SUBSECTION

l2pwscr/CatchApplesHideOnStop_sb3/
(for info on the HideOnStop addition see notes below in "scratch books -
l2pwscr - ch2 - scratch projects section - catching apples subsection -
2-23 figure")

without knowing if there is a boolean variable option, implemented it
with 0 meaning false and 1 meaning true:
    (repeat until (gameStopped = 1) or (gameEnded = 1))

note: the 'when I start as a clone' event block is useful to start a chain of
      blocks for whenever the 'create clone of myself' block
      creates a sprite clone elsewhere in the code

note2: a more imperative game loop example is shown for the cart sprite,
       as opposed to the event-driven method used in the Money game
       (l2pwscr/MoneyDrawBoard_sb3/), this time it now uses a forever block
       instead of a 'when key pressed' block

note3: 'when I start as a clone' is unexpectedly found within
       the control blocks section of the code palette rather
       than the events section

SCRATCH BOOKS - L2PWSCR - CH2 - SCRATCH PROJECTS SECTION -
CATCHING APPLES SUBSECTION - 2-23 FIGURE

The code figure displays a 'show' (looks) block at the start of the program
and a 'hide' (looks) block at the end of the program. Couldn't find an
explanation of why it is doing this
but by testing it out it seems to use show/hide so that the apple
will start invisible and then when the start flag is clicked it will become
visible; and then it would return to the invisible state
when the game ends (has repeated 30 times).
Unfortunately if you stop the game early with the stop button it
will not return it to an invisible state.

The problem with this is that before you save your
latest/final version of this game you'd have to
play it all the way through to the end in order for it to be played again
in the correct invisible state.
There is a bit of a hack that can be done
so that an action can be performed after the stop button is pressed
by forever incrementing a variable to be past the timer
(ie: forever { timerPlusOne = timer+1 })
and then using a 'when timer > timerPlusOne' block
to perform an action (in this case attach a hide block) when manually stopped.
(This works because the timer continues on even after stopped is pressed.
You can test this by checking the box next to the timer variable and you
can see its value continue to get higher on the screen after stopping)

Now if you stop early the apple will hide correctly but the game now doesn't
stop after 30 repeats (once apple clones are done being created the game is
supposed to be over) because the forever incrementing timerPlusOne keeps
the program running.
So to accomplish both things you can use a
'repeat until' block instead of the forever block and check a 2nd variable that
will be toggled to indicate all apples are done cloning and when compared
to be in a 'cloning is done' state, the 'repeat until' block will exit
and the timerPlusOne will stop being assigned. See example of this
implementation in l2pwscr/CatchApplesHideOnStop_sb3/

SCRATCH BOOKS - L2PWSCR - CH5 - VARIABLES
cautionary note:
be careful the first time you use variables, you must use the 'Make a Variable'
button and if possible select the radio button 'For this sprite only';
and if you need a new variable do not duplicate+rename an existing one
because you might end up renaming all instances where your previous variable
was used.

